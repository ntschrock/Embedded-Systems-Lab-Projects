#include <msp430fr6989.h>
#include <stdio.h>
#define redLED BIT0
#define greenLED BIT7
#define FLAGS UCA1IFG // Contains the transmit & receive flags
#define RXFLAG UCRXIFG // Receive flag
#define TXFLAG UCTXIFG // Transmit flag
#define TXBUFFER UCA1TXBUF // Transmit buffer
#define RXBUFFER UCA1RXBUF // Receive buffer

void Initialize_UART(void);
void Initialize_ADC(void);
void uart_write_uint16(unsigned int);
void uart_write_char(unsigned char);
void uart_newline(void);

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;

    P1DIR |= redLED;
    P1OUT &= ~redLED;

    for(;;)
    {
        ADC12CTL0 |= ADC12SC;
        while((ADC12CTL1 & ADC12BUSY) != 0);
        uart_write_uint16(ADC12MEM0);
        uart_newline();
        P1OUT ^= redLED;
    }

}

void Initialize_ADC(void)
{
    P9SEL0 |= BIT2;
    P9SEL1 |= BIT2;

    ADC12CTL0 |= ADC12ON;

    &= ~ADC12ENC;

    |=ADC12ON|ADC12SHT1_10;

    ADC12CTL1= ADC12SHS_0|ADC12SHP|ADC12DIV_7|ADC12SSEL_0;

    ADC12CTL2|= ADC12ENC;

    ADC12MCTL0|= ADC12INCH_10|ADC12VRSEL_0;

    return;
}

void Initialize_UART(void)
{
    P3SEL1 &= ~(BIT4|BIT5);
    P3SEL0 |= (BIT4|BIT5);

    UCA1CTLW0 |= UCSSEL_2;

    UCA1BRW = 6;
    UCA1MCTLW = UCBRS5 | UCBRF3 | UCOS16;
    UCA1CTLW0 &= ~UCSWRST;
}

void uart_write_uint16(unsigned int n)
{
    int x;
    if(n >= 10000)
    {
        x = (n / 10000) % 10;
        uart_write_char('0'+ x);
    }

    if(n >= 1000)
    {
        x = (n / 1000) % 10;
        uart_write_char('0' + x);
    }

    if(n >= 100)
    {
        x = (n / 100) % 10;
        uart_write_char('0' + x);
    }

    if(n >= 10)
    {
        x = (n / 10) % 10;
        uart_write_char('0' + x);
    }

    x = (n % 10);
    uart_write_char('0' + x);
    return;
}

void uart_write_char(unsigned char ch)
{
    while ((FLAGS & TXFLAG) == 0){}
    TXBUFFER = ch;
}

unsigned char uart_read_char(void)
{
    unsigned char temp;
    if( (FLAGS & RXFLAG) == 0)
        return 0;
    else
        temp = RXBUFFER;
    return temp;
}

void uart_newline(void)
{
    uart_write_char(10);
    uart_write_char(13);
}
