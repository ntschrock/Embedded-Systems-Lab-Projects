2.1-------------------------------------------------------
#include <msp430.h> 
#define redLED BIT0
#define greenLED BIT7
#define BUT1 BIT1


void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5;

	//direct pin as output
	P1DIR |= redLED;
	P9DIR |= greenLED;

	//turn the LEDs off
	P1OUT &= ~redLED;
	P9OUT &= ~greenLED;
	
	//configure the buttons
	P1DIR &= ~BUT1;
	P1REN |= BUT1;
	P1OUT |= BUT1;

	for(;;)
	{
	    if ((P1IN & BUT1) == 0)
	        P1OUT |= redLED;    //turn the LED on
	    else P1OUT &= ~redLED;  //turn the LED off
	}
}


2.2---------------------------------------------------------
#include <msp430.h> 
#define redLED BIT0
#define greenLED BIT7
#define BUT1 BIT1
#define BUT2 BIT2


void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5;

	//direct pin as output
	P1DIR |= redLED;
	P9DIR |= greenLED;

	//turn the LEDs off
	P1OUT &= ~redLED;
	P9OUT &= ~greenLED;
	
	//configure the buttons
	P1DIR &= ~(BUT1 | BUT2);
	P1REN |= (BUT1 | BUT2);
	P1OUT |= (BUT1 | BUT2);

	for(;;)
	{
	    if ((P1IN & BUT1) == 0)
	        P1OUT |= redLED;    //turn the LED on
	    else P1OUT &= ~redLED;  //turn the LED off

	    if ((P1IN & BUT2) == 0)
	        P9OUT |= greenLED;    //turn the LED on
	    else P9OUT &= ~greenLED;  //turn the LED off
	}
}


2.3-----------------------------------------------------------
#include <msp430.h> 
#define redLED BIT0
#define greenLED BIT7
#define BUT1 BIT1
#define BUT2 BIT2


void main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5;

	//direct pin as output
	P1DIR |= redLED;
	P9DIR |= greenLED;

	//turn the LEDs off
	P1OUT &= ~redLED;
	P9OUT &= ~greenLED;
	
	//configure the buttons
	P1DIR &= ~(BUT1 | BUT2);
	P1REN |= (BUT1 | BUT2);
	P1OUT |= (BUT1 | BUT2);

    for(;;)
    {
        while ((P1IN & BUT1) == 0)
        {
            P1OUT |= redLED;

            if ((P1IN & BUT2) == 0)
            {
                P1OUT |= redLED;
                P9OUT &= ~greenLED;
            }
            else P1OUT &= ~redLED;
        }

        while ((P1IN & BUT2) == 0)
        {
             P9OUT |= greenLED;

             if ((P1IN & BUT1) == 0)
             {
                 P9OUT |= greenLED;
                 P1OUT &= ~redLED;
             }
             else P9OUT &= ~greenLED;
         }
    }

}


2.4--------------------------------------------------------------------------
#include <msp430.h> 
#define redLED BIT0
#define greenLED BIT7
#define BUT1 BIT1
#define BUT2 BIT2


void main(void)
{
    volatile unsigned int i;
    WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5;

	//direct pin as output
	P1DIR |= redLED;
	P9DIR |= greenLED;

	//turn the LEDs off
	P1OUT &= ~redLED;
	P9OUT &= ~greenLED;
	
	//configure the buttons
	P1DIR &= ~(BUT1 | BUT2);
	P1REN |= (BUT1 | BUT2);
	P1OUT |= (BUT1 | BUT2);

    for(;;)
    {
           if ((P1IN & BUT1) == 0)
           {
           //H
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<40000; i++) {}

           //E
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<40000; i++) {}

           //L
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<40000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<40000; i++) {}    //space

           //L
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<40000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<40000; i++) {}    //space

           //O
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<40000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<40000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<20000; i++) {}
               P1OUT ^= redLED;     //TOGGLE ON
           for(i=0; i<40000; i++) {}
               P1OUT ^= redLED;     //TOGGLE OFF
           for(i=0; i<120000; i++) {}

           }
           else P1OUT &= ~redLED;
    }

}


